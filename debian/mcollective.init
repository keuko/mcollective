#! /bin/sh
### BEGIN INIT INFO
# Provides:          mcollective
# Required-Start:    $network $named $remote_fs $syslog
# Required-Stop:     $network $named $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: MCollective daemon
# Description:       Marionette Collective daemon - build server
#                    orchestration or parallel job execution systems.
### END INIT INFO

# Author: Jonas Genannt <jonas.genannt@capi2name.de>

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="Marionette Collective daemon"
NAME=mcollective
DAEMON=/usr/sbin/mcollectived
PIDFILE=/run/$NAME.pid
LOCKFILE="/var/lock/mcollective"
DAEMON_ARGS="--config=/etc/mcollective/server.cfg --pid=$PIDFILE"
SCRIPTNAME=/etc/init.d/$NAME
RUN=no

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /lib/init/vars.sh

. /lib/lsb/init-functions

if [ "$RUN" != "yes" ] ; then
	echo "mcollective disabled in /etc/default/mcollective"
	exit 0
fi

do_start()
{
	if [ -f ${LOCKFILE} ]; then
		# we were not shut down correctly
		if [ -s ${PIDFILE} ]; then
			kill `cat ${PIDFILE}` >/dev/null 2>&1
		fi
		rm -f ${LOCKFILE}
		sleep 2
	fi
	rm -f ${PIDFILE}
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
		--startas $DAEMON -- $DAEMON_ARGS \
		|| return 2
}

do_stop()
{
	if [ -s $PIDFILE ]; then
		kill `cat ${PIDFILE}` >/dev/null 2>&1
	fi
	rm -f $PIDFILE
	rm -f $LOCKFILE
	return "0"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc -p "${PIDFILE}" "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
